// Generated by CoffeeScript 1.7.1
(function() {
  window.addEventListener("load", function() {
    var Q, SPRITE_BOX, SPRITE_COLLECTABLE;
    Q = window.Q = Quintus({
      audioSupported: ['wav', 'mp3', 'ogg']
    }).include("Sprites, Scenes, Input, 2D, Anim, Touch, UI, Audio").setup({
      maximize: true
    }).controls().touch().enableSound();
    SPRITE_BOX = 1;
    SPRITE_COLLECTABLE = 8;
    Q.gravityY = 2000;
    Q.Sprite.extend("Player", {
      init: function(p) {
        this._super(p, {
          sheet: "player",
          sprite: "player",
          collisionMask: SPRITE_BOX | SPRITE_COLLECTABLE,
          x: 40,
          y: 555,
          standingPoints: [[-16, 44], [-23, 35], [-23, -48], [23, -48], [23, 35], [16, 44]],
          duckingPoints: [[-16, 44], [-23, 35], [-23, -10], [23, -10], [23, 35], [16, 44]],
          speed: 500,
          jump: -700,
          strength: 100,
          score: 0
        });
        this.p.points = this.p.standingPoints;
        this.p.jumped = false;
        this.add("2d, animation");
        this.on("strength.change", "onStrengthChange");
        this.on("score.change", "onScoreChange");
      },
      onStrengthChange: function(e) {
        this.p.strength += e.value;
        return Q.stageScene('hud', 3, this.p);
      },
      onScoreChange: function(e) {
        this.p.score += e.value;
        return Q.stageScene('hud', 3, this.p);
      },
      step: function(dt) {
        this.p.vx += (this.p.speed - this.p.vx) / 4;
        if (this.p.y > 555) {
          this.p.y = 555;
          this.p.jumped = false;
          this.p.landed = 1;
          this.p.vy = 0;
        } else {
          if (!this.p.jumped) {
            Q.audio.play('jump.mp3');
          }
          this.p.jumped = true;
          this.p.landed = 0;
        }
        if (Q.inputs["up"] && this.p.landed > 0) {
          this.p.vy = this.p.jump;
        }
        this.p.points = this.p.standingPoints;
        if (this.p.landed) {
          if (Q.inputs["down"]) {
            this.play("duck_right");
            this.p.points = this.p.duckingPoints;
          } else {
            this.play("walk_right");
          }
        } else {
          this.play("jump_right");
        }
        this.stage.viewport.centerOn(this.p.x + 300, 400);
      }
    });
    Q.Sprite.extend("CoinGold", {
      init: function() {
        var levels, player;
        levels = [565, 540, 500, 450];
        player = Q("Player").first();
        this._super({
          x: player.p.x + Q.width + 50,
          y: levels[Math.floor(Math.random() * 3)],
          sheet: "coin_gold",
          type: SPRITE_COLLECTABLE,
          vx: -600 + 200 * Math.random(),
          vy: 0,
          ay: 0,
          theta: 0,
          sensor: true
        });
        this.on("hit");
      },
      step: function(dt) {
        this.p.x += this.p.vx * dt;
        this.p.vy += this.p.ay * dt;
        this.p.y += this.p.vy * dt;
        if (this.p.y !== 565) {
          this.p.angle += this.p.theta * dt;
        }
        if (this.p.y > 800) {
          this.destroy();
        }
      },
      hit: function(col) {
        this.p.type = 0;
        this.p.collisionMask = Q.SPRITE_NONE;
        if (col.obj.isA("Player") && !this.grabbed) {
          col.obj.trigger('score.change', {
            value: 10
          });
          Q.audio.play("coin.mp3");
        }
        this.grabbed = true;
        this.p.vx = -50;
        this.p.ay = 400;
        this.p.vy = -800;
        this.p.opacity = 0.5;
      }
    });
    Q.GameObject.extend("CoinGoldEmitter", {
      init: function() {
        this.p = {
          launchDelay: 0.75,
          launchRandom: 1,
          launch: 2
        };
      },
      update: function(dt) {
        this.p.launch -= dt;
        if (this.p.launch < 0) {
          this.stage.insert(new Q.CoinGold());
          this.p.launch = this.p.launchDelay + this.p.launchRandom * Math.random();
        }
      }
    });
    Q.Sprite.extend("Heart", {
      init: function() {
        var levels, player;
        levels = [565, 540, 500, 450];
        player = Q("Player").first();
        this._super({
          x: player.p.x + Q.width + 50,
          y: levels[Math.floor(Math.random() * 3)],
          sheet: "heart",
          type: SPRITE_COLLECTABLE,
          vx: -600 + 200 * Math.random(),
          vy: 0,
          ay: 0,
          theta: 0,
          sensor: true
        });
        this.on("hit");
      },
      step: function(dt) {
        this.p.x += this.p.vx * dt;
        this.p.vy += this.p.ay * dt;
        this.p.y += this.p.vy * dt;
        if (this.p.y !== 565) {
          this.p.angle += this.p.theta * dt;
        }
        if (this.p.y > 800) {
          this.destroy();
        }
      },
      hit: function(col) {
        this.p.type = 0;
        this.p.collisionMask = Q.SPRITE_NONE;
        if (col.obj.isA("Player") && !this.grabbed) {
          col.obj.trigger('strength.change', {
            value: 10
          });
          Q.audio.play("heart.mp3");
        }
        this.grabbed = true;
        this.p.vx = -50;
        this.p.ay = 400;
        this.p.vy = -800;
        this.p.opacity = 0.5;
      }
    });
    Q.GameObject.extend("HeartEmitter", {
      init: function() {
        this.p = {
          launchDelay: 10,
          launchRandom: 50,
          launch: 2
        };
      },
      update: function(dt) {
        this.p.launch -= dt;
        if (this.p.launch < 0) {
          this.stage.insert(new Q.Heart());
          this.p.launch = this.p.launchDelay + this.p.launchRandom * Math.random();
        }
      }
    });
    Q.Sprite.extend("Box", {
      init: function() {
        var levels, player;
        levels = [565, 540, 500, 450];
        player = Q("Player").first();
        this._super({
          x: player.p.x + Q.width + 50,
          y: levels[Math.floor(Math.random() * 3)],
          frame: (Math.random() < 0.5 ? 1 : 0),
          scale: 2,
          type: SPRITE_BOX,
          sheet: "crates",
          vx: -600 + 200 * Math.random(),
          vy: 0,
          ay: 0,
          theta: (300 * Math.random() + 200) * (Math.random() < 0.5 ? 1 : -1)
        });
        this.on("hit");
      },
      step: function(dt) {
        this.p.x += this.p.vx * dt;
        this.p.vy += this.p.ay * dt;
        this.p.y += this.p.vy * dt;
        if (this.p.y !== 565) {
          this.p.angle += this.p.theta * dt;
        }
        if (this.p.y > 800) {
          this.destroy();
        }
      },
      hit: function(col) {
        if (col.obj.isA("Player") && !this.box_hit) {
          col.obj.trigger('strength.change', {
            value: -5
          });
          Q.audio.play("hit.mp3");
        }
        this.box_hit = true;
        this.p.type = 0;
        this.p.collisionMask = Q.SPRITE_NONE;
        this.p.vx = 200;
        this.p.ay = 400;
        this.p.vy = -300;
        this.p.opacity = 0.5;
      }
    });
    Q.GameObject.extend("BoxThrower", {
      init: function() {
        this.p = {
          launchDelay: 0.75,
          launchRandom: 1,
          launch: 2
        };
      },
      update: function(dt) {
        this.p.launch -= dt;
        if (this.p.launch < 0) {
          this.stage.insert(new Q.Box());
          this.p.launch = this.p.launchDelay + this.p.launchRandom * Math.random();
        }
      }
    });
    Q.scene("level1", function(stage) {
      stage.insert(new Q.Repeater({
        asset: "background-wall.png",
        speedX: 0.5
      }));
      stage.insert(new Q.Repeater({
        asset: "background-floor.png",
        repeatY: false,
        speedX: 1.0,
        y: 300
      }));
      stage.insert(new Q.BoxThrower());
      stage.insert(new Q.CoinGoldEmitter());
      stage.insert(new Q.HeartEmitter());
      stage.insert(new Q.Player());
      stage.add("viewport");
    });
    Q.scene('hud', function(stage) {
      var container, label, strength;
      container = stage.insert(new Q.UI.Container({
        x: 50,
        y: 0
      }));
      label = container.insert(new Q.UI.Text({
        x: 200,
        y: 20,
        label: "Score: " + stage.options.score,
        color: "white"
      }));
      strength = container.insert(new Q.UI.Text({
        x: 50,
        y: 20,
        label: "Health: " + stage.options.strength + '%',
        color: "white"
      }));
      return container.fit(20);
    });
    Q.load("player.json, player.png, background-wall.png, background-floor.png, crates.png, crates.json, collectables.png, collectables.json, coin.mp3, jump.mp3, hit.mp3, heart.mp3", function() {
      Q.compileSheets("player.png", "player.json");
      Q.compileSheets("crates.png", "crates.json");
      Q.compileSheets("collectables.png", "collectables.json");
      Q.animations("player", {
        walk_right: {
          frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          rate: 1 / 15,
          flip: false,
          loop: true
        },
        jump_right: {
          frames: [13],
          rate: 1 / 10,
          flip: false
        },
        stand_right: {
          frames: [14],
          rate: 1 / 10,
          flip: false
        },
        duck_right: {
          frames: [15],
          rate: 1 / 10,
          flip: false
        }
      });
      Q.stageScene("level1");
      Q.stageScene('hud', 3, Q('Player').first().p);
    });
  });

}).call(this);
